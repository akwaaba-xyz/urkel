/*
 * OpenFGA
 *
 * A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@openfga.dev
 * Generated by: https://openapi-generator.tech
 */
use std::env;

#[derive(Debug, Clone)]
pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    pub client: reqwest::Client,
    pub basic_auth: Option<BasicAuth>,
    pub oauth_access_token: Option<String>,
    pub bearer_access_token: Option<String>,
    pub api_key: Option<ApiKey>,
    // TODO: take an oauth2 token source, similar to the go one
}

pub type BasicAuth = (String, Option<String>);

#[derive(Debug, Clone)]
pub struct ApiKey {
    pub prefix: Option<String>,
    pub key: String,
}

impl Configuration {
    pub fn new() -> Configuration {
        Configuration::default()
    }
}

impl Default for Configuration {
    fn default() -> Self {
        let mut default_base_path = "http://0.0.0.0:8081".to_owned();
        let mut default_bearer_access_token = None;

        if let Ok(fga_addr) = env::var("OPENFGA_ADDR") {
            default_base_path = fga_addr.clone();
        }

        if let Ok(fga_bearer_token) = env::var("OPENFGA_BEARER_TOKEN") {
            default_bearer_access_token = Some(format!("Bearer {}", fga_bearer_token));
        }

        Configuration {
            base_path: default_base_path,
            user_agent: Some("openfga-sdk rust/0.0.1".to_owned()),
            client: reqwest::Client::new(),
            basic_auth: None,
            oauth_access_token: None,
            bearer_access_token: default_bearer_access_token,
            api_key: None,
        }
    }
}
